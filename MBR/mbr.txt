Возьмем MBR(Master Boot Record) от Windows 7

Открыв его в каком-нибудь hex редакторе мы получим:

0000  33 C0 8E D0 BC 00 7C 8E C0 8E D8 BE 00 7C BF 00  3.....|......|..
0010  06 B9 00 02 FC F3 A4 50 68 1C 06 CB FB B9 04 00  .......Ph.......
0020  BD BE 07 80 7E 00 00 7C 0B 0F 85 0E 01 83 C5 10  ....~..|........
0030  E2 F1 CD 18 88 56 00 55 C6 46 11 05 C6 46 10 00  .....V.U.F...F..
0040  B4 41 BB AA 55 CD 13 5D 72 0F 81 FB 55 AA 75 09  .A..U..]r...U.u.
0050  F7 C1 01 00 74 03 FE 46 10 66 60 80 7E 10 00 74  ....t..F.f`.~..t
0060  26 66 68 00 00 00 00 66 FF 76 08 68 00 00 68 00  &fh....f.v.h..h.
0070  7C 68 01 00 68 10 00 B4 42 8A 56 00 8B F4 CD 13  |h..h...B.V.....
0080  9F 83 C4 10 9E EB 14 B8 01 02 BB 00 7C 8A 56 00  ............|.V.
0090  8A 76 01 8A 4E 02 8A 6E 03 CD 13 66 61 73 1C FE  .v..N..n...fas..
00A0  4E 11 75 0C 80 7E 00 80 0F 84 8A 00 B2 80 EB 84  N.u..~..........
00B0  55 32 E4 8A 56 00 CD 13 5D EB 9E 81 3E FE 7D 55  U2..V...]...>.}U
00C0  AA 75 6E FF 76 00 E8 8D 00 75 17 FA B0 D1 E6 64  .un.v....u.....d
00D0  E8 83 00 B0 DF E6 60 E8 7C 00 B0 FF E6 64 E8 75  ......`.|....d.u
00E0  00 FB B8 00 BB CD 1A 66 23 C0 75 3B 66 81 FB 54  .......f#.u;f..T
00F0  43 50 41 75 32 81 F9 02 01 72 2C 66 68 07 BB 00  CPAu2....r,fh...
0100  00 66 68 00 02 00 00 66 68 08 00 00 00 66 53 66  .fh....fh....fSf
0110  53 66 55 66 68 00 00 00 00 66 68 00 7C 00 00 66  SfUfh....fh.|..f
0120  61 68 00 00 07 CD 1A 5A 32 F6 EA 00 7C 00 00 CD  ah.....Z2...|...
0130  18 A0 B7 07 EB 08 A0 B6 07 EB 03 A0 B5 07 32 E4  ..............2.
0140  05 00 07 8B F0 AC 3C 00 74 09 BB 07 00 B4 0E CD  ......<.t.......
0150  10 EB F2 F4 EB FD 2B C9 E4 64 EB 00 24 02 E0 F8  ......+..d..$...
0160  24 02 C3 49 6E 76 61 6C 69 64 20 70 61 72 74 69  $..Invalid parti
0170  74 69 6F 6E 20 74 61 62 6C 65 00 45 72 72 6F 72  tion table.Error
0180  20 6C 6F 61 64 69 6E 67 20 6F 70 65 72 61 74 69   loading operati
0190  6E 67 20 73 79 73 74 65 6D 00 4D 69 73 73 69 6E  ng system.Missin
01A0  67 20 6F 70 65 72 61 74 69 6E 67 20 73 79 73 74  g operating syst
01B0  65 6D 00 00 00 63 7B 9A D4 34 A0 2E 00 00 80 20  em...c{..4..... 
01C0  21 00 07 DF 13 0C 00 08 00 00 00 20 03 00 00 DF  !.......... ....
01D0  14 0C 07 FE FF FF 00 28 03 00 hh hh hh hh 00 00  ................
01E0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
01F0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 55 AA  ..............U.

Здесь первые 446 байт будут кодом загрузчика, следующие 64 таблицей разделов, а последние 2 байта сигнатура, значения которых дожны быть 55АА, по ним BIOS определяет является ли диск загрузочным или нет.

Дизассемблируем код
Адреса команд будем писать такими, какие они будут на самом деле, так изначально BIOS скопирует MBR по адресу 00007С00, там и будет располагаться первая инструкция


Копируем MBR в адрес 0000061С

00007C00  33C0              xor ax,ax		ставит значения региства ax в 0
00007C02  8ED0              mov ss,ax		0 в сегментный регистр стека
00007C04  BC007C            mov sp,0x7c00	ставит указатель головы стека на 7C00
00007C07  8EC0              mov es,ax		0 в сегментный регистр доп данных
00007C09  8ED8              mov ds,ax		0 в сегментный регистр данных
00007C0B  BE007C            mov si,0x7c00	копировать данные отсюда
00007C0E  BF0006            mov di,0x600	сюда
00007C11  B90002            mov cx,0x200	сколько копировать
00007C14  FC                cld			очистка флага направления
00007C15  F3A4              rep movsb		копирует из si в di cx-байт по одному байту
00007C17  50                push ax		загружаем селектор
00007C18  681C06            push word 0x61c	загружаем адрес по которому нужно передать управление(это адрес, куда мы записали наш MBR)
00007C1B  CB                retf		переходим


Пытаемся понять является ли раздел активным - можно ли загрузить ОС с него

0000061C  FB                sti			разрешаем реагировать на аппаратные прерывания
0000061D  B90400            mov cx,0x4		проверим 4 записи
00000620  BDBE07            mov bp,0x7be	положение первой записи в таблице разделов 
00000623  807E0000          cmp byte [bp+0x0],0x0	сравниваем с нулем
00000627  7C0B              jl 0x634		если меньше то идем смотреть более детально
00000629  0F850E01          jnz near 0x73b	если не 0, то выводим ошибку "Invalid partition table"
0000062D  83C510            add bp,byte +0x10	если нашли 0, то сдвигаемся на следующую запись
00000630  E2F1              loop 0x623		продолжаем пока cx не 0
00000632  CD18              int 0x18		прерывание будет говорить о том, что не был найден загрузочный том ("No ROM BASIC")


С помощью int 13 ah=41 проверяем возможно ли использовать расширенные функции

00000634  885600            mov [bp+0x0],dl	сохраняем положение записи из таблицы разделов в регистр dl
00000637  55                push bp		кладем bp в стек
00000638  C6461105          mov byte [bp+0x11],0x5	данные для возможного использования дальше(0000069F)
0000063C  C6461000          mov byte [bp+0x10],0x0	используем как флаг для данной функции
00000640  B441              mov ah,0x41		номер функции для проверки доступности расширенных функций
00000642  BBAA55            mov bx,0x55aa	индекс диска
00000645  CD13              int 0x13		вызов функции
00000647  5D                pop bp		получаем базовый указатель
00000648  720F              jc 0x659		если перенос установлен, то int 13 не отработала, а значит использование расширенных функций невозможно
0000064A  81FB55AA          cmp bx,0xaa55	смотрим поменялось ли значение bx
0000064E  7509              jnz 0x659		если нет, то использование функций невозможно
00000650  F7C10100          test cx,0x1		проверяем возможно ли использование функций
00000654  7403              jz 0x659		если нет, то нет, если да, то
00000656  FE4610            inc byte [bp+0x10]	увеличиваем значение слудующей после bp записи
00000659  6660              pushad		пушим все регистры в стек
0000065B  807E1000          cmp byte [bp+0x10],0x0	проверяем 0 ли значение слудующей после bp записи
0000065F  7426              jz 0x687		если 0, то невозможно использовать расширенные функции, используем стандартные


Расширенная чтение с помощью int 13 ah=42 читает первый сектор загрузочного раздела в память по адресу 7c00
Для этого начала на стеке создается DAP(Disk Address Packet)

00000661  666800000000      push dword 0x0	размер DAP
00000667  66FF7608          push dword [bp+0x8]	адрес сектора загрузочного раздела
0000066B  680000            push word 0x0	смещение
0000066E  68007C            push word 0x7c00	указатель на начало буфера
00000671  680100            push word 0x1	колличество секторов
00000674  681000            push word 0x10	размер DAP
00000677  B442              mov ah,0x42		номер функции
00000679  8A5600            mov dl,[bp+0x0]	индекс диска
0000067C  8BF4              mov si,sp		адрес DAP на стеке
0000067E  CD13              int 0x13		вызов функции
00000680  9F                lahf		загрузка флага выполнения в ah
00000681  83C410            add sp,byte +0x10	удалим DAP из стека, передвинув указатель
00000684  9E                sahf		сохраним ah в регистр флагов
00000685  EB14              jmp short 0x69b	продолжим выполнение


Используем стандартные int 13 функции тк проверка на расширенные функции не дала результатов

00000687  B80102            mov ax,0x201	функция читающая сектора
0000068A  BB007C            mov bx,0x7c00	начало буфера для чтения
0000068D  8A5600            mov dl,[bp+0x0]	диск
00000690  8A7601            mov dh,[bp+0x1]	-\
00000693  8A4E02            mov cl,[bp+0x2]	--- тут какаято магия с установкой головы, цилиндра и сектора диска
00000696  8A6E03            mov ch,[bp+0x3]	-/
00000699  CD13              int 0x13		читает сектора в память по адресу в bx


Проверяем смолги ли мы загрузить загрузочный сектор

0000069B  6661              popad		восстанавливаем все регистры, которые мы сохранили выше(00000659)
0000069D  731C              jnc 0x6bb		если предыдущие операции прошли успешно и cf=0 то идем дальше, иначе
0000069F  FE4E11            dec byte [bp+0x11]	уменьшаем счетчик
000006A2  750C              jnz 0x6b0		если не 0, то пробуем еще раз загрузить загрузочный сектор
000006A4  807E0080          cmp byte [bp+0x0],0x80	если bp указывает на нужный сектор
000006A8  0F848A00          jz near 0x736	выводим ошибку "Error loading operating system"
000006AC  B280              mov dl,0x80		ставим 80 в dl
000006AE  EB84              jmp short 0x634	пробуем все по новой
000006B0  55                push bp		пушим bp
000006B1  32E4              xor ah,ah		ставим ah в 0
000006B3  8A5600            mov dl,[bp+0x0]	индекс драйвера
000006B6  CD13              int 0x13		сбрасываем диск
000006B8  5D                pop bp		возвращаем bp
000006B9  EB9E              jmp short 0x659	пробуем еще раз загрузить загрузочный сектор
000006BB  813EFE7D55AA      cmp word [0x7dfe],0xaa55	проверяем что мы загрузили
000006C1  756E              jnz 0x731		если все нормально, то идем дальше, иначе переходим на сообщение об ошибке "Missing operating system"
000006C3  FF7600            push word [bp+0x0]	сохраняем bp


000006C6  E88D00            call 0x756		.
000006C9  7517              jnz 0x6e2		.
000006CB  FA                cli			.
000006CC  B0D1              mov al,0xd1		.
000006CE  E664              out 0x64,al		.
000006D0  E88300            call 0x756		.
000006D3  B0DF              mov al,0xdf		.
000006D5  E660              out 0x60,al		.
000006D7  E87C00            call 0x756		.
000006DA  B0FF              mov al,0xff		.
000006DC  E664              out 0x64,al		.
000006DE  E87500            call 0x756		.
000006E1  FB                sti			.   Этот код используется для проверки поддержки интерфейса
000006E2  B800BB            mov ax,0xbb00	.   TPM(Trusted Platform Module), тк он может быть использован
000006E5  CD1A              int 0x1a		.   BitLocker для проверки целостности ранних компонентов запуска
000006E7  6623C0            and eax,eax		.
000006EA  753B              jnz 0x727		.
000006EC  6681FB54435041    cmp ebx,0x41504354	.
000006F3  7532              jnz 0x727		.
000006F5  81F90201          cmp cx,0x102	.
000006F9  722C              jc 0x727		.
000006FB  666807BB0000      push dword 0xbb07	.
00000701  666800020000      push dword 0x200	.
00000707  666808000000      push dword 0x8	.
0000070D  6653              push ebx		.
0000070F  6653              push ebx		.
00000711  6655              push ebp		.
00000713  666800000000      push dword 0x0	.
00000719  6668007C0000      push dword 0x7c00	.
0000071F  6661              popad		.
00000721  680000            push word 0x0	.
00000724  07                pop es		.
00000725  CD1A              int 0x1a		.


00000727  5A                pop dx		получаем значение bp сохраненное ранее
00000728  32F6              xor dh,dh		dh в 0
0000072A  EA007C0000        jmp 0x0:0x7c00	прыгаем туда, куда мы загрузили загрузочный сектор(положительный конец MBR)

Подготовка к выводу ошибок

00000731  A0B707            mov al,[0x7b7]	ставит в al значение по адрессу, но чтобы перейти к адрусу сообщения об ошибке, нужно прибавить еще 700
00000734  EB08              jmp short 0x73e	вывод ошибки
00000736  A0B607            mov al,[0x7b6]	тоже самое для другой ошибки
00000739  EB03              jmp short 0x73e	вывод
0000073B  A0B507            mov al,[0x7b5]	аналогично


Вывод ошибок

0000073E  32E4              xor ah,ah		обнуляем ah
00000740  050007            add ax,0x700	добавим 700 к смещению
00000743  8BF0              mov si,ax		откуда читать
00000745  AC                lodsb		загружаем символ
00000746  3C00              cmp al,0x0		дошли до конца?
00000748  7409              jz 0x753		если да то перейдем дальше
0000074A  BB0700            mov bx,0x7		страница и цвет
0000074D  B40E              mov ah,0xe		консольный ввод вывод
0000074F  CD10              int 0x10		вывод символа
00000751  EBF2              jmp short 0x745	повторить со следующим символом
00000753  F4                hlt			приостановка процессора до возникновения прерывания
00000754  EBFD              jmp short 0x753	если прерывание возникло, повторим hlt

00000756  2BC9              sub cx,cx		.
00000758  E464              in al,0x64		.
0000075A  EB00              jmp short 0x75c	.
0000075C  2402              and al,0x2		.   дополнительный код для комментария с точками выше
0000075E  E0F8              loopne 0x758	.
00000760  2402              and al,0x2		.
00000762  C3                ret			.

Дальше у нас лужат сообщения отб ошибках, которые мы выводим в случае каких-то проблем выше, а также данные о смещении када ошибок. После этого лежит таблица разделов(64 байта), а последние 2 байта равные 55AA говорят о том, что диск является загрузочным.
